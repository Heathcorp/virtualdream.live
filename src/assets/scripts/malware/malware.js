// hi, in case you're worried, please don't be
// despite being named "malware", its all for theatre 
// this is purely cosmetic and confined to virtualdream.live 
// repairing fourth wall now bye

// INFECTION ORGANISATION

// load current infections from local storage
// return infection list
function loadInfectionStorage() {
    const infections = JSON.parse(localStorage.getItem('infections')) || [];
    return infections;
}

// save current infections to local storage
function saveInfectionStorage(infections) {
    localStorage.setItem("infections", JSON.stringify(infections));
}

// load stickers from local storage
function runInfections() {
    const infections = loadInfectionStorage() || [];
    // list current infections
    infections.forEach(infection => {
        switch(infection) {
            case "malPalPyramid":
                infectionMalPalPyramid();
                break;
            case "rapidLinks":
                infectionRapidLinks();
                break;
        }
    });
}

// add new infection
// call save to local storage
function addInfection(infectionName) {
    const infections = loadInfectionStorage();
    infections.push(infectionName);
    saveInfectionStorage(infections);
}

// load infections on start
window.addEventListener("load", function() {
    runInfections();
});


// INFECTION FUNCTIONALITY
// Mal Pal - Pyramid
function infectionMalPalPyramid() {
    let autoTimeOut = true;
    let autoReplace = true;

    // create pyramid mascot image 
    const imgSrc = "../../src/assets/img/mascots/mascot-pyramid.gif";
    const imgElement = document.createElement("img");
    imgElement.src = imgSrc;
    imgElement.style.position = "fixed";
    imgElement.style.left = "25px";
    imgElement.style.bottom = "25px";
    imgElement.style.zIndex = "10";
    document.body.appendChild(imgElement);
    
    // create bubble on run
    createBubble(getRandomBubblePhrase(), autoTimeOut);
    // bubbleTimeOut(newBubble);

    // delete bubble element 
    // bubble (element), autoReplace (boolean)
    function deleteBubble(bubble, autoReplace = false) {
        // Fade out before delete
        let opacity = 1;
        const fadeEffect = setInterval(function() {
            bubble.style.opacity = opacity;
            if (opacity > 0) {
                opacity -= 0.1;
            } else {
                // Once opacity is 0, delete element
                clearInterval(fadeEffect);
                bubble.remove();
                if (autoReplace) {
                    const autoReplaceTimeMin = 1000;
                    const autoReplaceTimeMax = 5000;
                    const autoReplaceTime = Math.floor(Math.random() * (autoReplaceTimeMax - autoReplaceTimeMin + 1) + autoReplaceTimeMin);
                    // Set timer for new bubble creation
                    setTimeout(function() {
                        createBubble(getRandomBubblePhrase(), autoTimeOut);
                    }, autoReplaceTime);
                }
            }
        }, 100);
    }


    // create bubble with given text
    // returns element
    // bubbleText (string), autoTimeOut (boolean)
    function createBubble(bubbleText, autoTimeOut=false) {
        // create bubble
        const bubbleDivElement = document.createElement("div");
        bubbleDivElement.className = "bubble";
        bubbleDivElement.style.left = "225px";
        bubbleDivElement.style.bottom = "200px";
        document.body.appendChild(bubbleDivElement);

        // create bubble close button
        const bubbleCloseElement = document.createElement("p");
        bubbleCloseElement.textContent = "X";
        bubbleCloseElement.className = "bubbleClose";
        bubbleCloseElement.onclick = function() { deleteBubble(bubbleDivElement, autoReplace) };
        bubbleDivElement.appendChild(bubbleCloseElement);

        // create bubble text
        const bubblePara = document.createElement("p");
        bubblePara.textContent = bubbleText;
        bubbleDivElement.appendChild(bubblePara);

        // set bubble automatic timeout if requested
        if(autoTimeOut) {
            const autoTimeOutMin = 5000;
            const autoTimeOutMax = 10000;
            const autoReplaceTime = Math.floor(Math.random() * (autoTimeOutMax - autoTimeOutMin + 1) + autoTimeOutMin);
            setTimeout(function() { 
                deleteBubble(bubbleDivElement, autoReplace) 
            }, autoReplaceTime);
        }

        return bubbleDivElement;
    }

    // pulls a random phrase from phrase array
    // returns string
    function getRandomBubblePhrase() {
        const bubblePhrases = [
            "hello world!",
            "aaa aa a aa a a aaaa aaaaaa aa a aaaa aa a aa a a aaaa aaaaaa aa a a aaa aa a aa a a aaaa aaaaaa aa a a aaa aa a aa a a aaaa aaaaaa aa a a",
            "wowowowowowow",
            `oh i love ${document.title}!`
        ]
        const randomIndex = Math.floor(Math.random() * bubblePhrases.length);
        return bubblePhrases[randomIndex];
    }
}

function infectionRapidLinks() {
    // do not trigger on any "rapid" sites
    if(!document.title.toLowerCase().includes("rapid")) {
        let targetLink = "https://rapiddealsonlinesaleswebboard.virtualdream.live/";
        let nth = 4
        // loop through all p elements
        // wrap every nth word in anchor with given link
        document.querySelectorAll("p").forEach(paragraph => {
            paragraph.innerHTML = paragraph.innerHTML.split(" ").map((word, index) => {
                if ((index + 1) % nth === 0) {
                    return `<a title="!!!!CLICK HERE!!!!" href="${targetLink}">${word}</a>`;
                }
                return word;
            }).join(" ");
        });
    }

}